# MarkLogic VisJS Graph Visualization

This AngularJS library allows you to easily produce a graph visualization for
triples stored in MarkLogic, based on the [VisJS Network
library](http://visjs.org/docs/network/). It is specifically designed with
applications generated by the [MarkLogic SlushJS
generator](https://github.com/marklogic/slush-marklogic-node) in mind.

## Getting Started

Install this library:

    bower install ml-visjs-graph-ng --save

If you want to use the default graphSearch and graphExpand functions, which return the node and link data powering the graph, you need to install the [mlpm module](https://github.com/patrickmcelwee/mlpm-visjs-graph) (if you want to [create your own](#custom-graph-search), you could use this mlpm_module code as a starting point or roll your own):

    npm install -g mlpm
    mlpm install visjs-graph --save
    mlpm deploy -H localhost -P 8040 -u admin -p admin

### Enable the triple index

Since this library works based on SPARQL queries against triples stored
in your MarkLogic database, you need to enable the triple index. 

#### Using Roxy

You should do this in `deploy/ml-config.xml` of your application.
Add the following line to the `<database></database>` configuration for the
database with name `<database-name>${content-db}</database-name>` (around line
179 at the time of this writing).

```xml
      <triple-index>true</triple-index>
```

#### Using ml-gradle

Update the ```src/main/ml-config/databases/content-database.json``` file for your application 
to include the following property:

```json
  "triple-index": true
```

## Example Implementation

Add the `ml.visjsGraph` module as a dependency to your app.module. For
example, in a [slush-generated
app](https://github.com/marklogic/slush-marklogic-node), add this to
`ui/app/app.js`:

```javascript
angular.module('app', [
   # ...
  'ml.visjsGraph',
  # ...
]);
```

You can add a VisJS graph for a document by adding the following HTML snippet
to a template, for example to `ui/app/detail/detail.html`:

```html
<ml-visjs-graph uris="[ctrl.uri]"></ml-visjs-graph>
```

NOTE: Support for multiple uris is not yet provided, but that future extension
is anticipated by this API. For now, it will only initialize the graph
visualization with the first uri in the list provided to the directive.

### Override default graphSearch and graphExpand<a name="custom-graph-search"></a>

You can override the default graphSearch and/or graphExpand in order to provide custom data provider. functions Specify them in the directive:


```html
<ml-visjs-graph uris="[ctrl.uri]" graph-search="myGraphSearch" graph-expand="myGraphExpand"></ml-visjs-graph>
```

- the graphSearch function is called when the graph is initialized. It takes as its first and only argument an array of URIs (the ones you pass to the directive)
- the graphExpand function is called when the user wants to expand a particular node, or potentially nodes. 

Both methods should return a promise that resolves to an object with two properties, `nodes` and `edges`, each containing an array. The `expand` function does not need to provide a full picture of the graph nodes and edges. Each node/edge it does return will either be updated or added. Existing nodes and edges will not be removed. This is a canned example that would work as a replacement for either graphSearch or graphExpand:
  
```javascript
function cannedSearch(uris) {
  return $q.when({
    nodes: [
      {
        id: '1',
        label: 'The Number 1!',
        group: 'number', // optional
        linkCount: 8 // we look for this to add an small orb to the icon
      },
      {
        id: '2',
        label: 'The Only Even Prime!',
        group: 'number', // optional
        linkCount: 16 // we look for this to add an small orb to the icon
      }
    ],
    edges: [
      {
        id: 'more-2-1',
        label: 'moreThan',
        from: '2',
        to: '1'
      }
    ]
  });
}
```

See the VisJS [nodes](http://visjs.org/docs/network/nodes.html) and [edges](http://visjs.org/docs/network/edges.html) documentation for additional VisJS properties you can add. You may also add additional, non-VisJS properties if you wish (for example, to provide content to a summary pane when a node is clicked).

The default functions are provided by the [`visjsGraphService`](https://github.com/patrickmcelwee/ml-visjs-graph-ng/blob/master/src/visjs-graph/visjs-graph.service.js), which simply calls a MarkLogic REST extension called `visjs`. (This offers an additional way to override the built-in functionality, by creating a different 'visjs' REST extension.)

## More Information

I recommend becoming familiar with the [documentation for a VisJS network](http://visjs.org/docs/network/).

## Sample Data

The original [slush-generated
app](https://github.com/marklogic/slush-marklogic-node) comes with 3000 JSON
documents representing people. For the moment, those documents do not include
triples.

This code repository has the same JSON documents, enriched with triples
representing foaf:knows relationships, an rdf:type, and an rdfs:label for each
document. One document also includes a rdfs:label for foaf:knows, so that it
displays on the graph as 'knows' rather than the more verbose 'foaf:knows'. To
use, you can replace the original `sample-data.zip` file in the slush-generated
app with the `sample-data.zip` file in this project. (Eventually, the
slush-generated app may use this project's version with triples.)

Then, you can load them with
(MLCP)[https://docs.marklogic.com/guide/ingestion/content-pump] like this:

    ./ml local mlcp -options_file import-sample-data.options

Or on Windows:

    ml.bat local mlcp -options_file import-sample-data.options

## Directives Provided

### `ml-visjs-graph`

TODO

